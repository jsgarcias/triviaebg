"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var uuid = __importStar(require("uuid"));
var IPCScope = 'KOJI_CUSTOM_VCC';
var IPCEvent;
(function (IPCEvent) {
    IPCEvent["LOADED"] = "loaded";
    IPCEvent["CHANGE"] = "onChange";
    IPCEvent["COMMIT"] = "onCommit";
    IPCEvent["FOCUS"] = "onFocus";
    IPCEvent["BLUR"] = "onBlur";
    IPCEvent["SHOW_MODAL"] = "onModal";
    IPCEvent["PROPS_UPDATED"] = "props_updated";
    IPCEvent["THEME_SET"] = "theme_set";
    IPCEvent["MODAL_RESOLVED"] = "modal_resolved";
    IPCEvent["UPLOAD_FILE"] = "upload_file";
    IPCEvent["FILE_UPLOADED"] = "file_uploaded";
})(IPCEvent || (IPCEvent = {}));
var CustomVCC = /** @class */ (function () {
    function CustomVCC() {
        // tslint:disable-next-line: variable-name
        this._props = {
            type: '',
            name: '',
            value: null,
            scope: '',
            variableName: '',
            options: {},
            collaborationDecoration: {},
        };
        // tslint:disable-next-line: variable-name
        this._theme = {
            colors: {},
            mixins: {},
        };
        this.idempotencySkips = [];
        // Set the VCC's key for communicating back to the parent
        try {
            var queryString = window.location.search.replace('?', '').split('&').reduce(function (acc, cur) {
                var _a = cur.split('='), k = _a[0], v = _a[1];
                acc[k] = v;
                return acc;
            }, {});
            this.props.variableName = queryString.key;
        }
        catch (err) {
            //
        }
        this.addListener();
    }
    Object.defineProperty(CustomVCC.prototype, "props", {
        get: function () {
            return this._props;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomVCC.prototype, "theme", {
        get: function () {
            return this._theme;
        },
        enumerable: true,
        configurable: true
    });
    CustomVCC.prototype.register = function (width, height) {
        this.postMessage(IPCEvent.LOADED, {
            height: height,
            width: width,
        });
    };
    ////////////////////////////////////////////////////////////////////////////////
    // Callbacks
    CustomVCC.prototype.onUpdate = function (callback) {
        this.updateCallback = callback;
    };
    CustomVCC.prototype.onTheme = function (callback) {
        this.themeCallback = callback;
    };
    ////////////////////////////////////////////////////////////////////////////////
    // Mutations
    CustomVCC.prototype.change = function (newValue) {
        // Invoke the update callback immediately and tag the update so we can skip
        // it when it comes back around
        var idempotencyKey = uuid.v4();
        this.idempotencySkips.push(idempotencyKey);
        this._props.value = newValue;
        if (this.updateCallback) {
            this.updateCallback(this.props);
        }
        this.postMessage(IPCEvent.CHANGE, {
            value: newValue,
        }, idempotencyKey);
    };
    CustomVCC.prototype.save = function () {
        this.postMessage(IPCEvent.COMMIT);
    };
    CustomVCC.prototype.focus = function () {
        this.postMessage(IPCEvent.FOCUS);
    };
    CustomVCC.prototype.blur = function () {
        this.postMessage(IPCEvent.BLUR);
    };
    ////////////////////////////////////////////////////////////////////////////////
    // Shared modals
    CustomVCC.prototype.showModal = function (type, currentValue, onComplete) {
        this.modalCallback = onComplete;
        this.currentModalId = uuid.v4();
        this.postMessage(IPCEvent.SHOW_MODAL, {
            type: type,
            callbackId: this.currentModalId,
            currentValue: currentValue,
        });
    };
    ////////////////////////////////////////////////////////////////////////////////
    // Shared methods
    CustomVCC.prototype.uploadFile = function (file, fileName, onComplete) {
        var _this = this;
        this.uploadCallback = onComplete;
        this.currentUploadId = uuid.v4();
        var fileReader = new FileReader();
        fileReader.onload = function () {
            _this.postMessage(IPCEvent.UPLOAD_FILE, {
                callbackId: _this.currentUploadId,
                fileName: fileName,
                fileData: fileReader.result,
            });
        };
        fileReader.readAsArrayBuffer(file);
    };
    ////////////////////////////////////////////////////////////////////////////////
    // IPC methods
    CustomVCC.prototype.addListener = function () {
        var _this = this;
        window.addEventListener('message', function (_a) {
            var data = _a.data;
            if (data._type !== IPCScope) {
                return;
            }
            var _idempotencyKey = data._idempotencyKey, event = data.event, payload = data.payload;
            if (event === IPCEvent.PROPS_UPDATED) {
                _this._props = payload;
                if (_idempotencyKey && _this.idempotencySkips.find(function (id) { return id === _idempotencyKey; })) {
                    _this.idempotencySkips = _this.idempotencySkips.filter(function (id) { return id !== _idempotencyKey; });
                    return;
                }
                if (_this.updateCallback) {
                    _this.updateCallback(_this.props);
                }
            }
            if (event === IPCEvent.THEME_SET) {
                _this._theme = payload;
                if (_this.themeCallback) {
                    _this.themeCallback(_this.theme);
                }
            }
            if (event === IPCEvent.MODAL_RESOLVED) {
                var callbackId = payload.callbackId, newValue = payload.newValue;
                if (_this.modalCallback && callbackId === _this.currentModalId) {
                    _this.modalCallback(newValue);
                    _this.currentModalId = undefined;
                    _this.modalCallback = undefined;
                }
            }
            if (event === IPCEvent.FILE_UPLOADED) {
                var callbackId = payload.callbackId, url = payload.url;
                if (_this.uploadCallback && callbackId === _this.currentUploadId) {
                    _this.uploadCallback(url);
                    _this.currentUploadId = undefined;
                    _this.uploadCallback = undefined;
                }
            }
        });
    };
    CustomVCC.prototype.postMessage = function (event, payload, idempotencyKey) {
        if (window.parent) {
            window.parent.postMessage({
                _type: IPCScope,
                _key: this.props.variableName,
                _idempotencyKey: idempotencyKey,
                event: event,
                payload: payload || null,
            }, '*');
        }
    };
    return CustomVCC;
}());
exports.default = CustomVCC;
//# sourceMappingURL=CustomVcc.js.map