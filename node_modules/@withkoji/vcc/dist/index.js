"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InstantRemixing", {
  enumerable: true,
  get: function get() {
    return _InstantRemixing["default"];
  }
});
Object.defineProperty(exports, "FeedSdk", {
  enumerable: true,
  get: function get() {
    return _FeedSdk["default"];
  }
});
Object.defineProperty(exports, "Keystore", {
  enumerable: true,
  get: function get() {
    return _Keystore["default"];
  }
});
Object.defineProperty(exports, "VccMiddleware", {
  enumerable: true,
  get: function get() {
    return _VccMiddleware["default"];
  }
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _deepDiff = _interopRequireDefault(require("deep-diff"));

var _resolveSecret = _interopRequireDefault(require("./tools/resolveSecret"));

var _SimpleEvent = _interopRequireDefault(require("./tools/SimpleEvent"));

var _InstantRemixing = _interopRequireDefault(require("./InstantRemixing"));

var _FeedSdk = _interopRequireDefault(require("./FeedSdk"));

var _Keystore = _interopRequireDefault(require("./Keystore"));

var _VccMiddleware = _interopRequireDefault(require("./VccMiddleware"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function deprecationNotice(method) {
  var isBreaking = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (isBreaking) {
    console.warn("[@withkoji/vcc] ".concat(method, " is deprecated and no longer available."));
  } else {
    console.warn("[@withkoji/vcc] ".concat(method, " is deprecated and no longer needs to be called.\nYou can safely remove this call from your project!"));
  }
}

var configDidChange = new _SimpleEvent["default"]();

var config = require('./res/config.json');

var _default = {
  config: config,
  configDidChange: configDidChange,
  enableConfigDidChange: function enableConfigDidChange() {
    if (module.hot) {
      module.hot.accept('./res/config.json', function () {
        var previousValue = _objectSpread({}, config); // eslint-disable-next-line global-require


        config = require('./res/config.json');
        var originalDiff = (0, _deepDiff["default"])(previousValue, config);
        console.log(originalDiff);
        var changes = originalDiff.map(function (diff) {
          if (diff.kind === 'A') {
            return {
              previousValue: diff.item.lhs,
              newValue: diff.item.rhs,
              path: [].concat((0, _toConsumableArray2["default"])(diff.path), [diff.index])
            };
          }

          return {
            previousValue: diff.lhs,
            newValue: diff.rhs,
            path: diff.path
          };
        });
        configDidChange.emit({
          newValue: config,
          previousValue: previousValue,
          changes: changes
        });
      });
    }
  },
  resolveSecret: _resolveSecret["default"],
  // Deprecated
  pageLoad: function pageLoad() {
    return deprecationNotice('Koji.pageLoad()');
  },
  on: function on() {
    return deprecationNotice('Koji.on()');
  },
  request: function request() {
    return deprecationNotice('Koji.request()', true);
  },
  pwaPrompt: function pwaPrompt() {
    return deprecationNotice('Koji.pwaPrompt()', true);
  }
};
exports["default"] = _default;