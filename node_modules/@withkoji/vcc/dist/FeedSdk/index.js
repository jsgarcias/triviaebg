"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable class-methods-use-this */

/* eslint-disable no-underscore-dangle */
var FeedSdk = /*#__PURE__*/function () {
  function FeedSdk() {
    (0, _classCallCheck2["default"])(this, FeedSdk);
    // Ugly globals attached to the window right now to avoid having to worry
    // about singletons/initialization state if this class is instantiated
    // multiple times at different timestamps in the app
    window._KOJI_FEED_SDK_IS_PLAYING = !window.location.hash.includes('#koji-feed-key=');
    window._KOJI_FEED_SDK_IS_BUBBLING_CURRENT_TOUCH = true;
    this._playbackListeners = [];

    this._registerListeners();
  } // Public getter for playback state


  (0, _createClass2["default"])(FeedSdk, [{
    key: "load",
    // Call when the app has loaded and is ready to be shown in the feed. The feed
    // will display a loading state until the app has called this method, and
    // will eventually time out and move to the next app in the feed.
    value: function load() {
      var _this = this;

      if (window._KOJI_FEED_SDK_HAS_LOADED) {
        return;
      }

      window._KOJI_FEED_SDK_HAS_LOADED = true;

      this._postMessage('Koji.Loaded'); // Bind gestures


      window.addEventListener('touchstart', function (e) {
        window._KOJI_FEED_SDK_IS_BUBBLING_CURRENT_TOUCH = true;
        var _e$changedTouches$ = e.changedTouches[0],
            screenX = _e$changedTouches$.screenX,
            screenY = _e$changedTouches$.screenY;

        _this._postMessage('Koji.TouchStart', {
          screenX: screenX,
          screenY: screenY
        });
      });
      window.addEventListener('touchmove', function (e) {
        if (!window._KOJI_FEED_SDK_IS_BUBBLING_CURRENT_TOUCH) {
          return;
        }

        var _e$changedTouches$2 = e.changedTouches[0],
            screenX = _e$changedTouches$2.screenX,
            screenY = _e$changedTouches$2.screenY;

        _this._postMessage('Koji.TouchMove', {
          screenX: screenX,
          screenY: screenY
        });
      });
      window.addEventListener('touchend', function (e) {
        if (!window._KOJI_FEED_SDK_IS_BUBBLING_CURRENT_TOUCH) {
          return;
        }

        var _e$changedTouches$3 = e.changedTouches[0],
            screenX = _e$changedTouches$3.screenX,
            screenY = _e$changedTouches$3.screenY;

        _this._postMessage('Koji.TouchEnd', {
          screenX: screenX,
          screenY: screenY
        });
      });
    } // The `load` method below takes care of automatically bubbling touch events
    // to the Koji feed controller (because a feed is composed of iframes, the
    // parent feed controlled can't capture touch events inside the frame due to
    // security policies). If a user is touching an area in your app that should
    // not trigger an "advance" gesture in the feed controller, simply invoke
    // this method at any point after the touch has started to cancel the gesture.
    // e.g., `<div ontouchmove={(e) => feed.requestCancelTouch()}>no touching</div>`

  }, {
    key: "requestCancelTouch",
    value: function requestCancelTouch() {
      console.log('Canceled touch');
      window._KOJI_FEED_SDK_IS_BUBBLING_CURRENT_TOUCH = false;
      this.postMessage('Koji.CancelTouch');
    } // In a feed view, apps are preloaded when they near the viewport. For most
    // apps, this isn't an issue. However, if an app plays audio/video or has a
    // "start" state, like a timer/countdown, Koji will let the app know when it
    // should start or stop playback. `callback` is a function with a single
    // boolean argument `.onPlaybackStateChanged((isPlaying: bool) => {})`

  }, {
    key: "onPlaybackStateChanged",
    value: function onPlaybackStateChanged(callback) {
      this._playbackListeners.push(callback);
    } // (private) Send a message to the parent, if one exists. Include a "feed token"
    // that we grab from the hash so we can identify messages originating
    // from this specific app in case it, for whatever reason, appears multiple
    // times in the same feed.

  }, {
    key: "_postMessage",
    value: function _postMessage(type) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var feedKey = window.location.hash.replace('#koji-feed-key=', '');

      if (window.parent) {
        window.parent.postMessage(_objectSpread({
          _type: type,
          _feedKey: feedKey
        }, message), '*');
      }
    } // (private) Register event listeners for changes to the play state

  }, {
    key: "_registerListeners",
    value: function _registerListeners() {
      var _this2 = this;

      window.addEventListener('message', function (_ref) {
        var data = _ref.data;
        var event = data.event;

        if (event === 'KojiFeed.Play') {
          try {
            window._KOJI_FEED_SDK_IS_PLAYING = true;

            _this2._playbackListeners.forEach(function (callback) {
              callback(true);
            });
          } catch (err) {
            console.log(err);
          }
        }

        if (event === 'KojiFeed.Pause') {
          try {
            window._KOJI_FEED_SDK_IS_PLAYING = false;

            _this2._playbackListeners.forEach(function (callback) {
              callback(false);
            });
          } catch (err) {
            console.log(err);
          }
        }
      });
    }
  }, {
    key: "isPlaying",
    get: function get() {
      return window._KOJI_FEED_SDK_IS_PLAYING;
    }
  }]);
  return FeedSdk;
}();

exports["default"] = FeedSdk;