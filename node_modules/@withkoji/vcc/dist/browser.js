"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InstantRemixing", {
  enumerable: true,
  get: function get() {
    return _InstantRemixing["default"];
  }
});
Object.defineProperty(exports, "FeedSdk", {
  enumerable: true,
  get: function get() {
    return _FeedSdk["default"];
  }
});
exports["default"] = void 0;

var _InstantRemixing = _interopRequireDefault(require("./InstantRemixing"));

var _FeedSdk = _interopRequireDefault(require("./FeedSdk"));

function deprecationNotice(method) {
  var isBreaking = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (isBreaking) {
    console.warn("[@withkoji/vcc] ".concat(method, " is deprecated and no longer available."));
  } else {
    console.warn("[@withkoji/vcc] ".concat(method, " is deprecated and no longer needs to be called.\nYou can safely remove this call from your project!"));
  }
}

var config = require('./res/config.json');

var _default = {
  config: config,
  // Deprecated
  resolveSecret: function resolveSecret() {
    return deprecationNotice('Koji.resolveSecret()', true);
  },
  enableConfigDidChange: function enableConfigDidChange() {
    return deprecationNotice('Koji.enableConfigDidChange()', true);
  },
  configDidChange: function configDidChange() {
    return deprecationNotice('Koji.configDidChange()', true);
  },
  pageLoad: function pageLoad() {
    return deprecationNotice('Koji.pageLoad()');
  },
  on: function on() {
    return deprecationNotice('Koji.on()');
  },
  request: function request() {
    return deprecationNotice('Koji.request()', true);
  },
  pwaPrompt: function pwaPrompt() {
    return deprecationNotice('Koji.pwaPrompt()', true);
  }
}; // Named exports

exports["default"] = _default;