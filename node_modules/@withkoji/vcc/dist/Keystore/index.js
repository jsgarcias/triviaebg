"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

/* eslint-disable class-methods-use-this */
var Keystore = /*#__PURE__*/function () {
  function Keystore(projectId, projectToken) {
    (0, _classCallCheck2["default"])(this, Keystore);
    this.projectId = projectId || process.env.KOJI_PROJECT_ID;
    this.projectToken = projectToken || process.env.KOJI_PROJECT_TOKEN;

    if (!this.projectId || !this.projectToken) {
      throw new Error('Missing project ID or token');
    }
  }

  (0, _createClass2["default"])(Keystore, [{
    key: "resolveValue",
    value: function () {
      var _resolveValue = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(keyPath) {
        var request, _yield$request$json, decryptedValue;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _nodeFetch["default"])(this.buildUri('/v1/keystore/get'), {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    scope: this.projectId,
                    token: this.projectToken,
                    keyPath: keyPath
                  })
                });

              case 2:
                request = _context.sent;
                _context.next = 5;
                return request.json();

              case 5:
                _yield$request$json = _context.sent;
                decryptedValue = _yield$request$json.decryptedValue;
                return _context.abrupt("return", decryptedValue);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function resolveValue(_x) {
        return _resolveValue.apply(this, arguments);
      }

      return resolveValue;
    }()
  }, {
    key: "buildUri",
    value: function buildUri(path) {
      if (process.env.NODE_TEST) {
        return "http://localhost:3129".concat(path);
      }

      return "https://rest.api.gokoji.com".concat(path);
    }
  }]);
  return Keystore;
}();

exports["default"] = Keystore;